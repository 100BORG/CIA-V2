import React, { createContext, useContext, useState, useEffect } from 'react';
import { supabase } from '../config/supabaseClient';

// Create context
const UserRoleContext = createContext();

// Custom hook for using the context
export const useUserRole = () => {
  const context = useContext(UserRoleContext);
  if (!context) {
    throw new Error('useUserRole must be used within a UserRoleProvider');
  }
  return context;
};

// Provider component
export const UserRoleProvider = ({ children }) => {
  const [currentUser, setCurrentUser] = useState(null);
  const [isAdmin, setIsAdmin] = useState(false);
  const [userRole, setUserRole] = useState('client');
  
  useEffect(() => {
    // Load user data from Supabase auth session
    const loadUserData = async () => {
      try {
        const { data: { user } } = await supabase.auth.getUser();
        
        if (user) {
          // Get full user profile from users table
          const { data: userData, error } = await supabase
            .from('users')
            .select('*')
            .eq('id', user.id)
            .single();
          
          if (error) throw error;
          
          if (userData) {
            setCurrentUser(userData);
            setIsAdmin(userData.role === 'admin');
            setUserRole(userData.role || 'client');
          }
        }
      } catch (error) {
        console.error("Error loading user data:", error);
      }
    };
    
    loadUserData();
    
    // Subscribe to auth changes
    const { data: authListener } = supabase.auth.onAuthStateChange(async (event, session) => {
      if (event === 'SIGNED_IN' && session) {
        loadUserData();
      } else if (event === 'SIGNED_OUT') {
        setCurrentUser(null);
        setIsAdmin(false);
        setUserRole('client');
      }
    });
    
    return () => {
      if (authListener && authListener.subscription) {
        authListener.subscription.unsubscribe();
      }
    };
  }, []);

  // Update user data when it changes
  const updateUserData = async () => {
    await loadUserData();
  };

  /**
   * Check if the current user has a specific permission
   * @param {string} permission - The permission to check
   * @returns {boolean} - Whether the user has the permission
   */
  const hasPermission = (permission) => {
    // Admin has all permissions
    if (isAdmin) return true;
    
    // For specific permissions
    switch (permission) {
      case 'assign-invoice':
        return isAdmin; // Only admins can assign invoices
      case 'create-invoice':
        return true; // Everyone can create invoices
      case 'delete-invoice':
        return isAdmin; // Only admins can delete invoices
      default:
        return false;
    }
  };

  const contextValue = {
    currentUser,
    userRole,
    isAdmin,
    hasPermission,
    updateUserData
  };

  return (
    <UserRoleContext.Provider value={contextValue}>
      {children}
    </UserRoleContext.Provider>
  );
};
